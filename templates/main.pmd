% Reporte de EEG

# Setup

```python, echo=False, name="Setup"
import pandas as pd
import os
import report as rp
import matplotlib.pyplot as plt
import networkx as nx
import numpy as np
from mpl_toolkits.axes_grid1 import make_axes_locatable
import matplotlib
import scipy.interpolate


global _dh
dir_path = _dh[0]

bands     = pd.read_csv(os.path.join(dir_path, "cache", "bands"))
setup     = pd.read_csv(os.path.join(dir_path, "cache", "setup"))
name      = pd.read_csv(os.path.join(dir_path, "cache", "name"))
other     = pd.read_csv(os.path.join(dir_path, "cache", "other"))
file_name = name["name"][0]
output    = other["output"][0]
fs        = other["freq"][0]

n_channels = len(setup)
pos = {}
for i,row in setup.iterrows():
    pos[row["name"]] = (row['x'],row['y'])
```

Analysis for file <% print(file_name) %>

```python, name="Analysis", echo=False
psd_df   = pd.read_csv(os.path.join(dir_path, "cache", "psd_df"), index_col=0)
peaks_df = pd.read_csv(os.path.join(dir_path, "cache", "peaks_df"), index_col=0, header=[0, 1])
abs_df   = pd.read_csv(os.path.join(dir_path, "cache", "abs_df"), index_col=0)
rel_df   = pd.read_csv(os.path.join(dir_path, "cache", "rel_df"), index_col=0)
cor_df   = pd.read_csv(os.path.join(dir_path, "cache", "cor_df"), index_col=0)
coh_df   = pd.read_csv(os.path.join(dir_path, "cache", "coh_df"), index_col=0)
pdif_df  = pd.read_csv(os.path.join(dir_path, "cache", "pdif_df"), index_col=0)
```

# Visualization
## Spectrum
### Power density
```python, name="Spuctrum"
for channel in psd_df:
    s = psd_df[channel]
    peaks = peaks_df[channel]
    freqs = peaks["Freq"].tolist()
    pots  = peaks["Pot"].tolist()
    plt.figure(1,figsize=(16, 4))
    plt.plot(psd_df.index,s)
    plt.scatter(freqs, pots, c='r')
    plt.ylabel('Power $uV^2$')
    plt.xlabel('Frequency')
    plt.title("Channel "+channel)
    plt.xlim(1, 20)
    plt.show()
```

## Absolute power
### Matrix
```python, name="Absolute Power Matrix"
fig, ax = plt.subplots(1,1,figsize=(16,6))
im = ax.imshow(abs_df)
c = setup["name"]
b = bands["name"]
ax.set_xticks(np.arange(len(c)))
ax.set_yticks(np.arange(len(b)))
ax.set_xticklabels(c)
ax.set_yticklabels(b)
ax.set_title("Absolute Power")

divider = make_axes_locatable(ax)
cax = divider.append_axes("right", size="2%", pad=0.5)
fig.colorbar(im, cax=cax)

plt.show()
```
### Headmap
```python, name="Absolute Power Headplot"
plots = rp.headmap(abs_df, setup)
for p in plots:
    plt.show(p[0]) # display
```

## Relative power
### Matrix
```python, name="Relative Power Matrix"
fig, ax = plt.subplots(1,1,figsize=(16,6))
im = ax.imshow(rel_df)
c = setup["name"]
b = bands["name"]
ax.set_xticks(np.arange(len(c)))
ax.set_yticks(np.arange(len(b)))
ax.set_xticklabels(c)
ax.set_yticklabels(b)
ax.set_title("Relative Power")

divider = make_axes_locatable(ax)
cax = divider.append_axes("right", size="2%", pad=0.5)
fig.colorbar(im, cax=cax)

plt.show()
```
### Headmap
```python, name="Relative Power Headmap"
plots = rp.headmap(rel_df, setup)
for p in plots:
    plt.show(p[0]) # display
```

## Corelation
### Matrix
```python, name="Correlation Matrix"
fig, ax = plt.subplots(1,1,figsize=(10,10))
im = ax.imshow(cor_df,vmin=-1, vmax=1, cmap=plt.cm.RdBu)
ax.set_xticks(np.arange(len(c)))
ax.set_yticks(np.arange(len(c)))
ax.set_xticklabels(c)
ax.set_yticklabels(c)
ax.set_title("Correlation")

divider = make_axes_locatable(ax)
cax = divider.append_axes("right", size="5%", pad=0.5)
fig.colorbar(im, cax=cax, ticks=[-1, -.5, 0, .5, 1])

plt.show()
```
### Headnet
```python, name="Correlation Headnet"
tresholds = [-0.8, 0.8]
fig, ax = rp.cor_headnet(cor_df, pos, tresholds)
plt.show() # display
```

## Coherence
### Headnets
```python, name="Coherence Headnets"
treshold = 0.8
plots = rp.coh_headnet(coh_df, pos, treshold)
for p in plots:
    plt.show(p[0]) # display
```

## Phase difference
### Headnet
```python, name="Phase difference Headnets"
treshold = 0.8
plots = rp.phs_headnet(pdif_df, pos)
for p in plots:
    plt.show(p[0]) # display
```
